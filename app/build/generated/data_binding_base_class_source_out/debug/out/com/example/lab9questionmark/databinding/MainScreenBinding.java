// Generated by view binder compiler. Do not edit!
package com.example.lab9questionmark.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.lab9questionmark.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MainScreenBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button backButton;

  @NonNull
  public final EditText editCollEval;

  @NonNull
  public final EditText editExamDate;

  @NonNull
  public final EditText editNbOfLec;

  @NonNull
  public final EditText editObservations;

  @NonNull
  public final EditText editSelfEval;

  @NonNull
  public final EditText editTeacherEval;

  @NonNull
  public final EditText editTextTextPersonName;

  @NonNull
  public final EditText editTimeForOtherMaterial;

  @NonNull
  public final EditText editTimeNeededPerLecture;

  @NonNull
  public final Button submitButton;

  @NonNull
  public final Button viewExamsButton;

  private MainScreenBinding(@NonNull ConstraintLayout rootView, @NonNull Button backButton,
      @NonNull EditText editCollEval, @NonNull EditText editExamDate, @NonNull EditText editNbOfLec,
      @NonNull EditText editObservations, @NonNull EditText editSelfEval,
      @NonNull EditText editTeacherEval, @NonNull EditText editTextTextPersonName,
      @NonNull EditText editTimeForOtherMaterial, @NonNull EditText editTimeNeededPerLecture,
      @NonNull Button submitButton, @NonNull Button viewExamsButton) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.editCollEval = editCollEval;
    this.editExamDate = editExamDate;
    this.editNbOfLec = editNbOfLec;
    this.editObservations = editObservations;
    this.editSelfEval = editSelfEval;
    this.editTeacherEval = editTeacherEval;
    this.editTextTextPersonName = editTextTextPersonName;
    this.editTimeForOtherMaterial = editTimeForOtherMaterial;
    this.editTimeNeededPerLecture = editTimeNeededPerLecture;
    this.submitButton = submitButton;
    this.viewExamsButton = viewExamsButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MainScreenBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MainScreenBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.main_screen, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MainScreenBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backButton;
      Button backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.editCollEval;
      EditText editCollEval = ViewBindings.findChildViewById(rootView, id);
      if (editCollEval == null) {
        break missingId;
      }

      id = R.id.editExamDate;
      EditText editExamDate = ViewBindings.findChildViewById(rootView, id);
      if (editExamDate == null) {
        break missingId;
      }

      id = R.id.editNbOfLec;
      EditText editNbOfLec = ViewBindings.findChildViewById(rootView, id);
      if (editNbOfLec == null) {
        break missingId;
      }

      id = R.id.editObservations;
      EditText editObservations = ViewBindings.findChildViewById(rootView, id);
      if (editObservations == null) {
        break missingId;
      }

      id = R.id.editSelfEval;
      EditText editSelfEval = ViewBindings.findChildViewById(rootView, id);
      if (editSelfEval == null) {
        break missingId;
      }

      id = R.id.editTeacherEval;
      EditText editTeacherEval = ViewBindings.findChildViewById(rootView, id);
      if (editTeacherEval == null) {
        break missingId;
      }

      id = R.id.editTextTextPersonName;
      EditText editTextTextPersonName = ViewBindings.findChildViewById(rootView, id);
      if (editTextTextPersonName == null) {
        break missingId;
      }

      id = R.id.editTimeForOtherMaterial;
      EditText editTimeForOtherMaterial = ViewBindings.findChildViewById(rootView, id);
      if (editTimeForOtherMaterial == null) {
        break missingId;
      }

      id = R.id.editTimeNeededPerLecture;
      EditText editTimeNeededPerLecture = ViewBindings.findChildViewById(rootView, id);
      if (editTimeNeededPerLecture == null) {
        break missingId;
      }

      id = R.id.submitButton;
      Button submitButton = ViewBindings.findChildViewById(rootView, id);
      if (submitButton == null) {
        break missingId;
      }

      id = R.id.viewExamsButton;
      Button viewExamsButton = ViewBindings.findChildViewById(rootView, id);
      if (viewExamsButton == null) {
        break missingId;
      }

      return new MainScreenBinding((ConstraintLayout) rootView, backButton, editCollEval,
          editExamDate, editNbOfLec, editObservations, editSelfEval, editTeacherEval,
          editTextTextPersonName, editTimeForOtherMaterial, editTimeNeededPerLecture, submitButton,
          viewExamsButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
